package com.dcac.realestatemanager.data.offlinedatabase.property

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Update
import kotlinx.coroutines.flow.Flow

// DAO interface for accessing PropertyEntity data
@Dao
interface PropertyDao {

    // Get all properties sorted by entry date (most recent first)
    @Query("SELECT * FROM properties ORDER BY entry_date DESC")
    fun getAllPropertiesByDate(): Flow<List<PropertyEntity>>

    // Get all properties sorted by entry date (alphabetic order)
    @Query("SELECT * FROM properties ORDER BY title ASC")
    fun getAllPropertiesByAlphabetic(): Flow<List<PropertyEntity>>

    // Get a specific property by its ID
    @Query("SELECT * FROM properties WHERE id = :id LIMIT 1")
    fun getPropertyById(id: Long): Flow<PropertyEntity?>

    // Multi-criteria search
    @Query("""
    SELECT * FROM properties 
    WHERE 
      (:minSurface IS NULL OR surface >= :minSurface) AND
      (:maxSurface IS NULL OR surface <= :maxSurface) AND
      (:minPrice IS NULL OR price >= :minPrice) AND
      (:maxPrice IS NULL OR price <= :maxPrice) AND
      (:type IS NULL OR type = :type) AND
      (:isSold IS NULL OR is_sold = :isSold)
""")
    fun searchProperties(
        minSurface: Int?,
        maxSurface: Int?,
        minPrice: Int?,
        maxPrice: Int?,
        type: String?,
        isSold: Boolean?
    ): Flow<List<PropertyEntity>>

    // Insert a new property (returns its autogenerated ID)
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertProperty(property: PropertyEntity): Long

    // Update an existing property
    @Update
    suspend fun updateProperty(property: PropertyEntity)

    // Delete a specific property
    @Delete
    suspend fun deleteProperty(property: PropertyEntity)

    // Mark a property as sold with the current date
    @Query("UPDATE properties SET is_sold = 1, sale_date = :saleDate WHERE id = :propertyId")
    suspend fun markPropertyAsSold(propertyId: Long, saleDate: String)

    // Delete all properties (useful for testing)
    @Query("DELETE FROM properties")
    suspend fun clearAll()
}
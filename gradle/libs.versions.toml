[versions]
# Library and plugin version declarations (centralized)
appcompat = "1.7.1"
constraintlayout = "2.2.1"
junit = "4.13.2"
androidxJunit = "1.2.1"
espressoCore = "3.6.1"
agp = "8.4.2"
junitJupiter = "5.10.0"
kotlin = "2.1.20"

compose-bom = "2025.06.01"
kotlinxCoroutinesTest = "1.7.3"
room = "2.7.2"
datastore = "1.1.7"
location = "21.3.0"
maps = "19.2.0"
ksp = "2.1.20-1.0.32"
mockk = "1.13.7"
threetenabp = "1.4.4"
truth = "1.4.2"

uiTextGoogleFonts = "1.8.3"
activityCompose = "1.10.1"

retrofit = "2.9.0"
kotlinSerialization = "1.9.0"
retrofitKotlinxSerializationConverter = "1.0.0"
okhttp = "4.11.0"
kotlinxSerializationJson = "1.6.3"
coroutinesPlayServices = "1.7.3"

firebaseBom = "32.7.3"
googleServices = "4.4.3"

[libraries]
# Declare libraries using group, name, and version references

# 🔹 Provides backwards compatibility for interface components (Toolbar, Theme, etc.) on older versions of Android.
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }

# 🔹 Create flexible, high-performance interfaces with fluid positioning via constraints.
androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }

# 🧪 Used for classic Java unit tests (e.g. business logic).
junit = { group = "junit", name = "junit", version.ref = "junit" }

# 🧪 Provides JUnit integration for instrumented Android testing (in the emulator or on a real device).
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidxJunit" }

# 🧪 Android UI test framework to automatically interact with UI components.
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }

# --- Compose (via BOM) ---
# 🎨 BOM Compose: ensures that all Compose libraries used are compatible with each other.
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "compose-bom" }

androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }

# 🎨 Basic UI component: allows you to design declarative interfaces (equivalent to classic `Views`).
androidx-ui = { group = "androidx.compose.ui", name = "ui" }

# 🛠️ Adds preview to Android Studio + Compose debugging tools.
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling-preview" }

# 🎨 Material Design 3 library for Compose (buttons, sliders, themes...).
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }

# --- Room ---
# 🗃️ Room's main runtime for database access.
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junitJupiter" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinxCoroutinesTest" }
room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }

# 🧪 Kotlin-friendly version of Room with coroutine support and practical extensions.
room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }

# ⚙️ Used by KSP/KAPT to generate DAO/entity code at compile time.
room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }

# --- DataStore ---
# 💾 Saves simple preferences (key/value) asynchronously and type-safely (replaces SharedPreferences).
datastore-preferences = { group = "androidx.datastore", name = "datastore-preferences", version.ref = "datastore" }

# --- Location & Maps ---
# 📍 Provides access to GPS location, network, etc. via the Fused Location API.
location-services = { group = "com.google.android.gms", name = "play-services-location", version.ref = "location" }

# 🗺️ Integration of Google Maps into Android applications (map display, markers, etc.).
maps = { group = "com.google.android.gms", name = "play-services-maps", version.ref = "maps" }

# threetenabp provides backport support for Java 8’s java.time API on Android devices with API level < 26, enabling modern date and time handling on older Android versions.
threetenabp = { module = "com.jakewharton.threetenabp:threetenabp", version.ref = "threetenabp" }
# --- Testing ---
# 🧪 Kotlin mocking lib: simulates objects for unit testing.
mockk = { group = "io.mockk", name = "mockk", version.ref = "mockk" }

# 🧪 Assertion framework more readable and expressive than JUnit (used with Espresso or MockK).
truth = { group = "com.google.truth", name = "truth", version.ref = "truth" }

androidx-ui-text-google-fonts = { group = "androidx.compose.ui", name = "ui-text-google-fonts", version.ref = "uiTextGoogleFonts" }

androidx-material-icons-extended = { module = "androidx.compose.material:material-icons-extended" }

# 🚀 Retrofit itself, to make HTTP calls (GET, POST, etc).
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
# 🔁 JSON converter for Retrofit, based on kotlinx.serialization (alternative to Gson/Moshi).
retrofit-kotlinx-serialization = { module = "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter", version.ref = "retrofitKotlinxSerializationConverter" }
# 🛠️ Low-level network library used by Retrofit for connections, redirections, timeouts, etc.
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
# 📄 JSON parsing library with kotlinx.serialization, annotates `@Serializable` classes.
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerializationJson" }
# Kotlin coroutines support for Google Play Services APIs,
# enabling coroutine-friendly usage of Play Services tasks such as Location API.
kotlinx-coroutines-play-services = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-play-services", version.ref = "coroutinesPlayServices" }

# --- Firebase (via BOM) ---

# 📦 Firebase Bill of Materials (BOM) to align all Firebase library versions automatically.
# This allows you to omit versions on individual Firebase dependencies for consistency and easier upgrades.
firebase-bom = { group = "com.google.firebase", name = "firebase-bom", version.ref = "firebaseBom" }

# 🔐 Firebase Authentication: enables user sign-in with email, Google, Facebook, etc.
# Used for managing secure access and user identity in the app.
firebase-auth = { group = "com.google.firebase", name = "firebase-auth" }

# ☁️ Firebase Firestore: cloud-hosted NoSQL database with offline support.
# Allows real-time syncing and querying of property data between local and remote.
firebase-firestore = { group = "com.google.firebase", name = "firebase-firestore" }

# 📊 Firebase Analytics: automatically tracks user engagement and navigation in your app.
# Helps you measure screen views, button clicks, session duration, etc.
firebase-analytics = { group = "com.google.firebase", name = "firebase-analytics" }


[plugins]
# Plugin declarations using IDs and versions from the version catalog
# ⚙️ Main plugin for creating Android applications (APK, buildTypes, etc.).
android-application = { id = "com.android.application", version.ref = "agp" }

# ⚙️ Enables Kotlin support for Android (syntax, coroutines, interop...).
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }

# ⚙️ Kotlin Symbol Processing: compile-time code generation plugin for Room, Hilt, etc. (faster than KAPT).
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }

kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
# ✨ Kotlin Serialization plugin (enable in `build.gradle.kts`) to automatically generate JSON serialization code.
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlinSerialization" }

# 🔧 Firebase Gradle Plugin: required to initialize Firebase SDK and inject configuration (e.g., google-services.json).
# This plugin parses google-services.json and generates necessary code during the build.
google-services = { id = "com.google.gms.google-services", version.ref = "googleServices" }